 #pragma GCC optimize("Ofast")
    #pragma GCC target("avx,avx2,fma")
    #pragma GCC optimization ("unroll-loops")
    #include <bits/stdc++.h> 
    using namespace std;
    #define ll long long 
    #define all(x) (x).begin(),(x).end()
    #define vll vector<ll>
    #define vi vector<int>
    #define pi pair<int,int>    
    #define vp vector<pi>
    #define pb push_back
    #define mp make_pair
    #define F first
    #define S second
    #define POB pop_back 
    #define f(i,x,z) for(ll i=x;i<z;i++)
    #define debug(x) cout<<'DEBUG------> '<<x<<endl
    #define srt(v) sort(v.begin(), v.end())
    #define clr(x) memset(x, 0, sizeof(x)) 
    #define setall(x,a) memset(x, a, sizeof(x))
    #define INF 1000000000000000003 
    #define mi map<int,int>
    #define mod 1000000007
    const long long MAX_SIZE = 100001; 
    vector<long long >isprime(MAX_SIZE , true); 
    vector<long long >prime; 
    vector<long long >SPF(MAX_SIZE); 

void merge(ll a[],ll l,ll mid,ll r)
{
    ll n1=mid-l+1,n2=r-mid;
    ll b[n1],c[n2];
    f(i,0,n1)
    {
        b[i]=a[l+i];
    }
    cout<<"\n";
    f(i,0,n2)
    {
        c[i]=a[mid+i+1];
    }
    ll i=0,j=0,k=l;
    while(i<n1 && j<n2)
    {
        if(b[i]<c[j])
        {
            a[k]=b[i];
            k++;
            i++;
        }
        else{
            a[k]=c[j];
            k++;
            j++;
        }
    }
    while(i<n1)
    {
        a[k]=b[i];
        k++;
        i++; 
    }
    while(j<n2)
    {
        a[k]=c[j];
        k++;
        j++;
    }
    cout<<"\n";
}
void mergesort(ll a[],ll l,ll r)
{
    // cout<<l<<r<<"\n";
    if(l<r)
    {
        ll mid=(l+r)/2;
        mergesort(a,l,mid);
        mergesort(a,mid+1,r);  
        merge(a,l,mid,r);
    }
}
    int main()
    {
        // freopen("plants.in", "r", stdin);    
        // freopen('output.txt', 'w', stdout);
        ios::sync_with_stdio(0);// Input and output clearance
        cin.tie(0);
        ll n;
        cin>>n;
        f(i,0,n)
        {
            cin>>a[i];
        }
        ll l=0,r=n-1;
        mergesort(a,l,r);
        f(i,0,n)
        {
            cout<<a[i]<<" ";
        }
        cout<<"\n";

    }
